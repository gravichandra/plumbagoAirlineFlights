<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:cluster="http://www.mulesoft.org/schema/mule/ee/cluster" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:context="http://www.springframework.org/schema/context" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
    <db:mysql-config name="MySQL_Configuration" host="${mysql.host}" port="${mysql.port}" user="${mysql.username}" password="${mysql.password}" database="${mysql.database}" doc:name="MySQL Configuration"/>
    <validation:config name="Validation_Configuration" doc:name="Validation Configuration"/>
    <configuration defaultExceptionStrategy-ref="plumbagoAirlines-apiKitGlobalExceptionMapping" doc:name="Configuration">
        <http:config useTransportForUris="false"/>
    </configuration>

    <flow name="plumbagoAirlines-main">
        <http:listener config-ref="plumbagoAirlines-httpListenerConfig" path="/api/*" doc:name="HTTP"/>
        <apikit:router config-ref="plumbagoAirlines-config" doc:name="APIkit Router"/>
        <exception-strategy ref="plumbagoAirlines-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="plumbagoAirlines-console">
        <http:listener config-ref="plumbagoAirlines-httpListenerConfig" path="/console/*" doc:name="HTTP"/>
        <apikit:console config-ref="plumbagoAirlines-config" doc:name="APIkit Console"/>
    </flow>

    <flow name="get:/plumbagoAirlineFlights/byCities:plumbagoAirlines-config">
        <set-variable variableName="fromCity" value="#[message.inboundProperties.'http.query.params'.from]" doc:name="fromCity"/>
        <set-variable variableName="toCity" value="#[message.inboundProperties.'http.query.params'.to]" doc:name="toCity"/>
        <set-variable variableName="fromDate" value="#[message.inboundProperties.'http.query.params'.fromDate]" doc:name="fromDate"/>
        <set-variable variableName="toDate" value="#[#[message.inboundProperties.'http.query.params'.toDate]]" doc:name="toDate"/>
        <set-variable variableName="classType" value="#[message.inboundProperties.'http.query.params'.classType]" doc:name="classType"/>
        <db:select config-ref="MySQL_Configuration" doc:name="queryFlightDetails">
            <db:parameterized-query><![CDATA[SELECT * FROM flights.flightdetails WHERE ((fromCity = #[flowVars.fromCity] and toCity = #[flowVars.toCity]) or (fromCity = #[flowVars.toCity] and toCity = #[flowVars.fromCity])) and classtype = #[flowVars.classType] and (date = #[flowVars.toDate] or date = #[flowVars.fromDate]);]]></db:parameterized-query>
        </db:select>
        <dw:transform-message doc:name="tranformResponse" metadata:id="f2ec381d-48bb-4966-965d-6dcc9c4b6273">
            <dw:input-payload doc:sample="sample_data\list_map_2.dwl"/>
            <dw:input-variable variableName="fromCity"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	status: {
		code: 200,
		type: "Success",
		message: "The call was successful"
	},
	response: {
		flightDetails: payload map ((payload01 , indexOfPayload01) -> {
			flightNumber: payload01.flightnumber,
			flightName: payload01.flightname,
			classType: payload01.classtype,
			date: payload01.date,
			fromCity: payload01.fromcity,
			toCity: payload01.tocity,
			seatsAvailable: payload01.seatsavailable,
			price: payload01.price
		})
	}
} when ((sizeOf payload) != 0) otherwise
{
	status: {
		code: 404,
		type: "NoFlightsFound",
		message: "The call was successful: No Data Found"
	},
	response: {
		message: "Invalid Criteria: No flights Retrieved"
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <logger message="Response Retrieved Successfully : #[payload]" level="INFO" doc:name="logResponse"/>

    </flow>
    <flow name="post:/plumbagoAirlineFlights/seatBooking:plumbagoAirlines-config">
        <set-payload value="#[dw(&quot;payload&quot;,&quot;application/java&quot;)]" doc:name="setPayload"/>
        <set-variable variableName="inputPayload" value="#[payload]" doc:name="inputPayload"/>
        <set-variable variableName="flightNumberTo" value="#[payload.bookingDetails.flightDetails.flightNumberTo]" doc:name="readFlightNumberTo"/>
        <set-variable variableName="flightNumberFrom" value="#[payload.bookingDetails.flightDetails.flightNumberFrom]" doc:name="readFlightNumberFrom"/>
        <set-variable variableName="classType" value="#[payload.bookingDetails.flightDetails.classType]" doc:name="readClassType"/>
        <set-variable variableName="phoneNumber" value="#[payload.bookingDetails.paymentDetails.contactNumber]" doc:name="phoneNumber"/>
        <enricher source="#[payload]" target="#[flowVars.flightDetails]" doc:name="Message Enricher">
            <db:select config-ref="MySQL_Configuration" doc:name="queryFlightDetails">
                <db:parameterized-query><![CDATA[SELECT * FROM flights.flightdetails WHERE classtype = #[flowVars.classType] and (flightnumber = #[flowVars.flightNumberTo] or flightnumber = #[flowVars.flightNumberFrom]) ORDER BY date ASC;]]></db:parameterized-query>
            </db:select>
        </enricher>
        <set-variable variableName="calculateAmount" value="#[(payload.bookingDetails.passengerDetails.size() * dw(&quot;flowVars.flightDetails.price[0]&quot;)) + (payload.bookingDetails.passengerDetails.size() * dw(&quot;flowVars.flightDetails.price[1]&quot;))]" doc:name="calculateAmount"/>
        <set-variable variableName="seatsAvailable" value="#[dw(&quot;flowVars.flightDetails.*seatsavailable&quot;)[0] &gt; 0 &amp;&amp; dw(&quot;flowVars.flightDetails.*seatsavailable&quot;)[1] &gt; 0]" doc:name="seatsAvailable"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.seatsAvailable == true]">
                <ee:multi-transactional action="ALWAYS_BEGIN" doc:name="Transactional">
                    <foreach collection="#[payload.bookingDetails.passengerDetails]" doc:name="For Each">
                        <dw:transform-message doc:name="Transform Message" metadata:id="9863c9a6-adf9-4fe2-812c-6c977d1d3db0">
                            <dw:input-payload doc:sample="sample_data\map_1.dwl"/>
                            <dw:input-variable doc:sample="sample_data\list_map_3.dwl" variableName="flightDetails"/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	passengerDetails: flowVars.flightDetails map ((flightDetail , indexOfFlightDetail) -> {
		passengername: payload.name,
		passengeraddress: payload.address,
		passengercity: payload.city,
		passengerstate: payload.state,
		passengertraveldate: flightDetail.date,
		tocity: flightDetail.tocity,
		fromcity: flightDetail.fromcity,
		price: flightDetail.price,
		flightNumber: flightDetail.flightnumber
	})
}]]></dw:set-payload>
                        </dw:transform-message>
                        <foreach collection="#[payload.passengerDetails]" doc:name="For Each">
                            <set-variable variableName="randomNumber" value="#[(new java.util.Random().nextInt(9999999))+10000000]" doc:name="Variable"/>
                            <db:insert config-ref="MySQL_Configuration" doc:name="Database">
                                <db:parameterized-query><![CDATA[INSERT INTO `flights`.`reservationdetails`
(`passengername`,
`passengeraddress`,
`passengercity`,
`passengerstate`,
`passengertraveldate`,
`tocity`,
`fromcity`,
`pnrdetails`,
`price`,
`flightnumber`,
`contactnumber`)
VALUES
(#[payload.passengername],
#[payload.passengeraddress],
#[payload.passengercity],
#[payload.passengerstate],
#[payload.passengertraveldate],
#[payload.tocity],
#[payload.fromcity],
#[flowVars.randomNumber],
#[payload.price],
#[payload.flightNumber],
#[flowVars.phoneNumber]);]]></db:parameterized-query>
                            </db:insert>
                        </foreach>
                    </foreach>
                    <enricher source="#[payload]" target="#[flowVars.cardDetails]" doc:name="Message Enricher">
                        <db:select config-ref="MySQL_Configuration" doc:name="Database">
                            <db:parameterized-query><![CDATA[SELECT * FROM `flights`.`carddetails` WHERE cardnumber = #[payload.bookingDetails.paymentDetails.'credit card number'] and cardexpiration = #[payload.bookingDetails.paymentDetails.expiration];]]></db:parameterized-query>
                        </db:select>
                    </enricher>
                    <choice doc:name="Choice">
                        <when expression="#[flowVars.cardDetails.size() != 0 &amp;&amp; (dw(&quot;flowVars.cardDetails.amount[0]&quot;) &gt; flowVars.calculateAmount)]">
                            <set-variable variableName="deductAmount" value="#[dw(&quot;flowVars.cardDetails.amount[0]&quot;) - flowVars.calculateAmount]" doc:name="deductAmount"/>
                            <db:update config-ref="MySQL_Configuration" doc:name="Database">
                                <db:parameterized-query><![CDATA[UPDATE `flights`.`carddetails`
SET `amount` = #[flowVars.deductAmount]
WHERE `cardnumber` = #[dw("flowVars.cardDetails.cardnumber[0]")] and `cardexpiration` = #[dw("flowVars.cardDetails.cardexpiration[0]")];]]></db:parameterized-query>
                            </db:update>
                            <logger level="INFO" doc:name="Logger"/>
                        </when>
                        <otherwise>
                            <validation:is-true config-ref="Validation_Configuration" expression="#[flowVars.seatsAvailable == true]" doc:name="Validation"/>
                        </otherwise>
                    </choice>
                    <rollback-exception-strategy maxRedeliveryAttempts="3" doc:name="Rollback Exception Strategy">
                        <logger message="#[exception]" level="INFO" doc:name="Logger"/>
                        <on-redelivery-attempts-exceeded>
                            <set-property propertyName="http.status" value="500" doc:name="Property"/>
                            <set-payload value="{
&quot;statusCode&quot;: 50000,
&quot;statusType&quot;: &quot;InternalServerException&quot;,
&quot;message&quot;: #[exception.cause.message]
}" doc:name="Set Payload"/>
                        </on-redelivery-attempts-exceeded>
                    </rollback-exception-strategy>
                </ee:multi-transactional>
            </when>
            <otherwise>
                <logger message="No Seats Available for Flights: #[flowVars.flightNumberFrom] or #[flowVars.flightNumberTo]" level="INFO" doc:name="logError"/>
                <set-payload value="{
	status: {
		code: 404,
		type: &quot;NoSeatsAvailable&quot;,
		message: &quot;The call was successful: No Data Found&quot;
	},
	response: {
		message: &quot;Sorry, No Seats Available&quot;
	}
}" doc:name="setInvalidResponse"/>
            </otherwise>
        </choice>
    </flow>
    <apikit:mapping-exception-strategy name="plumbagoAirlines-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="http.status" value="404" doc:name="Property"/>
            <set-payload value="{
&quot;statusCode&quot;: 404,
&quot;statusType&quot;: &quot;ResourceNotFoundException&quot;,
&quot;message&quot;: &quot;No resource found for the Request URL&quot;
}" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="http.status" value="405" doc:name="Property"/>
            <set-payload value="{
&quot;statusCode&quot;: 405,
&quot;statusType&quot;: &quot;InvalidMethodException&quot;,
&quot;message&quot;: &quot;A request method is not supported for the requested resource.&quot;
}" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="http.status" value="415" doc:name="Property"/>
            <set-payload value="{
&quot;statusCode&quot;: 415,
&quot;statusType&quot;: &quot;UnsupportedMediaException&quot;,
&quot;message&quot;: &quot;Unsupported Media Type&quot;
}" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="http.status" value="406" doc:name="Property"/>
            <set-payload value="{
&quot;statusCode&quot;: 405,
&quot;statusType&quot;: &quot;NotAcceptableException&quot;,
&quot;message&quot;: &quot;A request not accepted.&quot;
}" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="http.status" value="400" doc:name="Property"/>
            <set-payload value="{
&quot;statusCode&quot;: 400,
&quot;statusType&quot;: &quot;FieldMissingException&quot;,
&quot;message&quot;: &quot;Bad request. This is reported when mandatory parameters in the request are missing.&quot;
}" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="500">
            <apikit:exception value="java.lang.Exception"/>
            <set-property propertyName="http.status" value="500" doc:name="Property"/>
            <set-payload value="{
&quot;statusCode&quot;: 50000,
&quot;statusType&quot;: &quot;InternalServerException&quot;,
&quot;message&quot;: &quot;Internal server error&quot;
}" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>
